// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/tag/dummy.proto

package tag

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Dummy service

type DummyService interface {
	// 添加标签
	AddTag(ctx context.Context, in *AddTagRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 删除标签
	RemoveTag(ctx context.Context, in *RemoveTagRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 检索标签
	FilterTag(ctx context.Context, in *FilterTagRequest, opts ...client.CallOption) (*FilterTagResponse, error)
}

type dummyService struct {
	c    client.Client
	name string
}

func NewDummyService(name string, c client.Client) DummyService {
	return &dummyService{
		c:    c,
		name: name,
	}
}

func (c *dummyService) AddTag(ctx context.Context, in *AddTagRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Dummy.AddTag", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyService) RemoveTag(ctx context.Context, in *RemoveTagRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Dummy.RemoveTag", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyService) FilterTag(ctx context.Context, in *FilterTagRequest, opts ...client.CallOption) (*FilterTagResponse, error) {
	req := c.c.NewRequest(c.name, "Dummy.FilterTag", in)
	out := new(FilterTagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dummy service

type DummyHandler interface {
	// 添加标签
	AddTag(context.Context, *AddTagRequest, *BlankResponse) error
	// 删除标签
	RemoveTag(context.Context, *RemoveTagRequest, *BlankResponse) error
	// 检索标签
	FilterTag(context.Context, *FilterTagRequest, *FilterTagResponse) error
}

func RegisterDummyHandler(s server.Server, hdlr DummyHandler, opts ...server.HandlerOption) error {
	type dummy interface {
		AddTag(ctx context.Context, in *AddTagRequest, out *BlankResponse) error
		RemoveTag(ctx context.Context, in *RemoveTagRequest, out *BlankResponse) error
		FilterTag(ctx context.Context, in *FilterTagRequest, out *FilterTagResponse) error
	}
	type Dummy struct {
		dummy
	}
	h := &dummyHandler{hdlr}
	return s.Handle(s.NewHandler(&Dummy{h}, opts...))
}

type dummyHandler struct {
	DummyHandler
}

func (h *dummyHandler) AddTag(ctx context.Context, in *AddTagRequest, out *BlankResponse) error {
	return h.DummyHandler.AddTag(ctx, in, out)
}

func (h *dummyHandler) RemoveTag(ctx context.Context, in *RemoveTagRequest, out *BlankResponse) error {
	return h.DummyHandler.RemoveTag(ctx, in, out)
}

func (h *dummyHandler) FilterTag(ctx context.Context, in *FilterTagRequest, out *FilterTagResponse) error {
	return h.DummyHandler.FilterTag(ctx, in, out)
}
