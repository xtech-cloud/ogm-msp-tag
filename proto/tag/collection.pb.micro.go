// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/tag/collection.proto

package tag

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Collection service

type CollectionService interface {
	// 添加标签
	AddTag(ctx context.Context, in *CollectionAddTagRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 删除标签
	RemoveTag(ctx context.Context, in *CollectionRemoveTagRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 更新标签
	UpdateTag(ctx context.Context, in *CollectionUpdateTagRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 列举标签
	ListTag(ctx context.Context, in *CollectionListTagRequest, opts ...client.CallOption) (*CollectionListTagResponse, error)
	// 搜索标签
	SearchTag(ctx context.Context, in *CollectionSearchTagRequest, opts ...client.CallOption) (*CollectionSearchTagResponse, error)
	// 智能提示关键字
	SuggestFilter(ctx context.Context, in *CollectionSuggestFilterRequest, opts ...client.CallOption) (*CollectionSuggestFilterResponse, error)
	// 替换关键字
	// 为包含指定关键字的所有标签替换新的关键字
	ReplaceKeyword(ctx context.Context, in *CollectionReplaceKeywordRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 扩展关键字
	// 为包含指定关键字的所有标签追加新的关键字
	ExtendKeyword(ctx context.Context, in *CollectionExtendKeywordRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 合并Json格式数据
	MergeJson(ctx context.Context, in *CollectionMergeJsonRequest, opts ...client.CallOption) (*BlankResponse, error)
}

type collectionService struct {
	c    client.Client
	name string
}

func NewCollectionService(name string, c client.Client) CollectionService {
	return &collectionService{
		c:    c,
		name: name,
	}
}

func (c *collectionService) AddTag(ctx context.Context, in *CollectionAddTagRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Collection.AddTag", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionService) RemoveTag(ctx context.Context, in *CollectionRemoveTagRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Collection.RemoveTag", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionService) UpdateTag(ctx context.Context, in *CollectionUpdateTagRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Collection.UpdateTag", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionService) ListTag(ctx context.Context, in *CollectionListTagRequest, opts ...client.CallOption) (*CollectionListTagResponse, error) {
	req := c.c.NewRequest(c.name, "Collection.ListTag", in)
	out := new(CollectionListTagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionService) SearchTag(ctx context.Context, in *CollectionSearchTagRequest, opts ...client.CallOption) (*CollectionSearchTagResponse, error) {
	req := c.c.NewRequest(c.name, "Collection.SearchTag", in)
	out := new(CollectionSearchTagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionService) SuggestFilter(ctx context.Context, in *CollectionSuggestFilterRequest, opts ...client.CallOption) (*CollectionSuggestFilterResponse, error) {
	req := c.c.NewRequest(c.name, "Collection.SuggestFilter", in)
	out := new(CollectionSuggestFilterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionService) ReplaceKeyword(ctx context.Context, in *CollectionReplaceKeywordRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Collection.ReplaceKeyword", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionService) ExtendKeyword(ctx context.Context, in *CollectionExtendKeywordRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Collection.ExtendKeyword", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionService) MergeJson(ctx context.Context, in *CollectionMergeJsonRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Collection.MergeJson", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Collection service

type CollectionHandler interface {
	// 添加标签
	AddTag(context.Context, *CollectionAddTagRequest, *BlankResponse) error
	// 删除标签
	RemoveTag(context.Context, *CollectionRemoveTagRequest, *BlankResponse) error
	// 更新标签
	UpdateTag(context.Context, *CollectionUpdateTagRequest, *BlankResponse) error
	// 列举标签
	ListTag(context.Context, *CollectionListTagRequest, *CollectionListTagResponse) error
	// 搜索标签
	SearchTag(context.Context, *CollectionSearchTagRequest, *CollectionSearchTagResponse) error
	// 智能提示关键字
	SuggestFilter(context.Context, *CollectionSuggestFilterRequest, *CollectionSuggestFilterResponse) error
	// 替换关键字
	// 为包含指定关键字的所有标签替换新的关键字
	ReplaceKeyword(context.Context, *CollectionReplaceKeywordRequest, *BlankResponse) error
	// 扩展关键字
	// 为包含指定关键字的所有标签追加新的关键字
	ExtendKeyword(context.Context, *CollectionExtendKeywordRequest, *BlankResponse) error
	// 合并Json格式数据
	MergeJson(context.Context, *CollectionMergeJsonRequest, *BlankResponse) error
}

func RegisterCollectionHandler(s server.Server, hdlr CollectionHandler, opts ...server.HandlerOption) error {
	type collection interface {
		AddTag(ctx context.Context, in *CollectionAddTagRequest, out *BlankResponse) error
		RemoveTag(ctx context.Context, in *CollectionRemoveTagRequest, out *BlankResponse) error
		UpdateTag(ctx context.Context, in *CollectionUpdateTagRequest, out *BlankResponse) error
		ListTag(ctx context.Context, in *CollectionListTagRequest, out *CollectionListTagResponse) error
		SearchTag(ctx context.Context, in *CollectionSearchTagRequest, out *CollectionSearchTagResponse) error
		SuggestFilter(ctx context.Context, in *CollectionSuggestFilterRequest, out *CollectionSuggestFilterResponse) error
		ReplaceKeyword(ctx context.Context, in *CollectionReplaceKeywordRequest, out *BlankResponse) error
		ExtendKeyword(ctx context.Context, in *CollectionExtendKeywordRequest, out *BlankResponse) error
		MergeJson(ctx context.Context, in *CollectionMergeJsonRequest, out *BlankResponse) error
	}
	type Collection struct {
		collection
	}
	h := &collectionHandler{hdlr}
	return s.Handle(s.NewHandler(&Collection{h}, opts...))
}

type collectionHandler struct {
	CollectionHandler
}

func (h *collectionHandler) AddTag(ctx context.Context, in *CollectionAddTagRequest, out *BlankResponse) error {
	return h.CollectionHandler.AddTag(ctx, in, out)
}

func (h *collectionHandler) RemoveTag(ctx context.Context, in *CollectionRemoveTagRequest, out *BlankResponse) error {
	return h.CollectionHandler.RemoveTag(ctx, in, out)
}

func (h *collectionHandler) UpdateTag(ctx context.Context, in *CollectionUpdateTagRequest, out *BlankResponse) error {
	return h.CollectionHandler.UpdateTag(ctx, in, out)
}

func (h *collectionHandler) ListTag(ctx context.Context, in *CollectionListTagRequest, out *CollectionListTagResponse) error {
	return h.CollectionHandler.ListTag(ctx, in, out)
}

func (h *collectionHandler) SearchTag(ctx context.Context, in *CollectionSearchTagRequest, out *CollectionSearchTagResponse) error {
	return h.CollectionHandler.SearchTag(ctx, in, out)
}

func (h *collectionHandler) SuggestFilter(ctx context.Context, in *CollectionSuggestFilterRequest, out *CollectionSuggestFilterResponse) error {
	return h.CollectionHandler.SuggestFilter(ctx, in, out)
}

func (h *collectionHandler) ReplaceKeyword(ctx context.Context, in *CollectionReplaceKeywordRequest, out *BlankResponse) error {
	return h.CollectionHandler.ReplaceKeyword(ctx, in, out)
}

func (h *collectionHandler) ExtendKeyword(ctx context.Context, in *CollectionExtendKeywordRequest, out *BlankResponse) error {
	return h.CollectionHandler.ExtendKeyword(ctx, in, out)
}

func (h *collectionHandler) MergeJson(ctx context.Context, in *CollectionMergeJsonRequest, out *BlankResponse) error {
	return h.CollectionHandler.MergeJson(ctx, in, out)
}
